generator client {
  provider = "prisma-client-js"
  output   = "../lib/prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Worker {
  id             String           @id @default(uuid())
  firstName      String
  lastName       String
  phone          String
  email          String
  car            Car?
  isStrong       Boolean          @default(false)
  allergies      Allergy[]
  jobs           ActiveJob[]
  driving        Ride[]           @relation("Driver")
  passengerIn    Ride[]
  registeredIn   SummerJobEvent[]
  responsibleFor ActiveJob[]      @relation("ResponsibleWorker")
}

model Car {
  id          String        @id @default(uuid())
  name        String        @db.VarChar(64)
  description String        @default("")
  seats       Int
  owner       Worker        @relation(fields: [ownerId], references: [id])
  ownerId     String        @unique
  rides       Ride[]
  odometers   CarOdometer[]
}

model CarOdometer {
  id                  String         @id @default(uuid())
  car                 Car            @relation(fields: [carId], references: [id])
  carId               String
  start               Int
  end                 Int
  reimbursementAmount Int            @default(0)
  reimbursed          Boolean        @default(false)
  event               SummerJobEvent @relation(fields: [eventId], references: [id])
  eventId             String

  @@unique([carId, eventId])
}

model Allergy {
  id                 String        @id @default(uuid())
  code               String        @db.VarChar(32)
  workersWithAllergy Worker[]
  jobsWithAllergens  ProposedJob[]
}

model ProposedJob {
  id            String      @id @default(uuid())
  name          String      @db.VarChar(64)
  description   String      @default("")
  requiredDays  Int
  completed     Boolean     @default(false)
  pinned        Boolean     @default(false)
  minWorkers    Int
  maxWorkers    Int
  strongWorkers Int
  address       String
  contact       String
  hasFood       Boolean     @default(false)
  hasShower     Boolean     @default(false)
  area          Area        @relation(fields: [areaId], references: [id])
  areaId        String
  activeJobs    ActiveJob[]
  allergens     Allergy[]
}

model ActiveJob {
  id                  String      @id @default(uuid())
  privateDescription  String      @default("")
  publicDescription   String      @default("")
  proposedJob         ProposedJob @relation(fields: [proposedJobId], references: [id])
  proposedJobId       String
  workers             Worker[]
  plan                Plan        @relation(fields: [planId], references: [id])
  planId              String
  rides               Ride[]
  responsibleWorker   Worker?     @relation("ResponsibleWorker", fields: [responsibleWorkerId], references: [id])
  responsibleWorkerId String?

  @@unique([proposedJobId, planId])
}

model Ride {
  id          String      @id @default(uuid())
  description String      @default("")
  driver      Worker      @relation("Driver", fields: [driverId], references: [id])
  driverId    String
  car         Car         @relation(fields: [carId], references: [id])
  carId       String
  passengers  Worker[]
  jobs        ActiveJob[]
}

model Plan {
  id               String         @id @default(uuid())
  day              DateTime       @unique @db.Date
  jobs             ActiveJob[]
  summerJobEvent   SummerJobEvent @relation(fields: [summerJobEventId], references: [id])
  summerJobEventId String
}

model Area {
  id               String         @id @default(uuid())
  name             String         @db.VarChar(64)
  description      String         @default("")
  requiresCar      Boolean
  jobs             ProposedJob[]
  SummerJobEvent   SummerJobEvent @relation(fields: [summerJobEventId], references: [id])
  summerJobEventId String
}

model SummerJobEvent {
  id           String        @id @default(uuid())
  name         String        @db.VarChar(64)
  startDate    DateTime
  endDate      DateTime
  isActive     Boolean       @default(false)
  areas        Area[]
  plans        Plan[]
  workers      Worker[]
  carOdometers CarOdometer[]
}
